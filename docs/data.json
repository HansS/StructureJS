{
    "project": {
        "name": "Single-Page-Application-GruntJS",
        "description": "A sample single page JavaScript application workflow boilerplate with Grunt.js",
        "version": "0.1.0",
        "url": ""
    },
    "files": {
        "src/assets/scripts/structurejs/display/DOMElement.js": {
            "name": "src/assets/scripts/structurejs/display/DOMElement.js",
            "modules": {},
            "classes": {
                "DOMElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/assets/scripts/structurejs/display/DisplayObjectContainer.js": {
            "name": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "modules": {},
            "classes": {
                "DisplayObjectContainer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/assets/scripts/structurejs/display/Stage.js": {
            "name": "src/assets/scripts/structurejs/display/Stage.js",
            "modules": {},
            "classes": {
                "Stage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/assets/scripts/structurejs/event/BaseEvent.js": {
            "name": "src/assets/scripts/structurejs/event/BaseEvent.js",
            "modules": {},
            "classes": {
                "BaseEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/assets/scripts/structurejs/event/EventBroker.js": {
            "name": "src/assets/scripts/structurejs/event/EventBroker.js",
            "modules": {},
            "classes": {
                "EventBroker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/assets/scripts/structurejs/event/EventDispatcher.js": {
            "name": "src/assets/scripts/structurejs/event/EventDispatcher.js",
            "modules": {},
            "classes": {
                "EventDispatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/assets/scripts/structurejs/event/TimerEvent.js": {
            "name": "src/assets/scripts/structurejs/event/TimerEvent.js",
            "modules": {},
            "classes": {
                "TimerEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/assets/scripts/structurejs/model/ValueObject.js": {
            "name": "src/assets/scripts/structurejs/model/ValueObject.js",
            "modules": {},
            "classes": {
                "ValueObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/assets/scripts/structurejs/plugin/jquery.eventListener.js": {
            "name": "src/assets/scripts/structurejs/plugin/jquery.eventListener.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/assets/scripts/structurejs/util/StringUtil.js": {
            "name": "src/assets/scripts/structurejs/util/StringUtil.js",
            "modules": {},
            "classes": {
                "StringUtil": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/assets/scripts/structurejs/util/TemplateFactory.js": {
            "name": "src/assets/scripts/structurejs/util/TemplateFactory.js",
            "modules": {},
            "classes": {
                "TemplateFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/assets/scripts/structurejs/util/Timer.js": {
            "name": "src/assets/scripts/structurejs/util/Timer.js",
            "modules": {},
            "classes": {
                "Timer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/assets/scripts/structurejs/util/Util.js": {
            "name": "src/assets/scripts/structurejs/util/Util.js",
            "modules": {},
            "classes": {
                "Util": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/assets/scripts/structurejs/BaseObject.js": {
            "name": "src/assets/scripts/structurejs/BaseObject.js",
            "modules": {},
            "classes": {
                "BaseObject": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "StructureJS": {
            "name": "StructureJS",
            "submodules": {
                "view": 1,
                "event": 1,
                "model": 1,
                "util": 1,
                "core": 1
            },
            "classes": {
                "DOMElement": 1,
                "DisplayObjectContainer": 1,
                "Stage": 1,
                "BaseEvent": 1,
                "EventBroker": 1,
                "EventDispatcher": 1,
                "TimerEvent": 1,
                "ValueObject": 1,
                "StringUtil": 1,
                "TemplateFactory": 1,
                "Timer": 1,
                "Util": 1,
                "BaseObject": 1
            },
            "fors": {},
            "namespaces": {},
            "file": "src/assets/scripts/structurejs/BaseObject.js",
            "line": 8
        },
        "view": {
            "name": "view",
            "submodules": {},
            "classes": {
                "DOMElement": 1,
                "DisplayObjectContainer": 1,
                "Stage": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "StructureJS",
            "namespace": "",
            "description": "The {{#crossLink \"DOMElement\"}}{{/crossLink}} class is the base view class for all objects that can be placed into the HTML DOM.",
            "file": "src/assets/scripts/structurejs/display/Stage.js",
            "line": 8
        },
        "event": {
            "name": "event",
            "submodules": {},
            "classes": {
                "BaseEvent": 1,
                "EventBroker": 1,
                "EventDispatcher": 1,
                "TimerEvent": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "StructureJS",
            "namespace": "",
            "description": "<p>The {{#crossLink \"BaseEvent\"}}{{/crossLink}} class is used as the base class for the creation of Event objects, which are passed as parameters to event listeners when an event occurs.</p>\n\n<p>The properties of the {{#crossLink \"BaseEvent\"}}{{/crossLink}} class carry basic information about an event, such as the event's type or whether the event's default behavior can be canceled.\nFor many events, such as the events represented by the Event class constants, this basic information is sufficient. Other events, however, may require more\ndetailed information.</p>",
            "file": "src/assets/scripts/structurejs/event/TimerEvent.js",
            "line": 7
        },
        "model": {
            "name": "model",
            "submodules": {},
            "classes": {
                "ValueObject": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "StructureJS",
            "namespace": "",
            "description": "Value Object (VO) is a design pattern used to transfer data between software application subsystems.",
            "file": "src/assets/scripts/structurejs/model/ValueObject.js",
            "line": 8
        },
        "util": {
            "name": "util",
            "submodules": {},
            "classes": {
                "StringUtil": 1,
                "TemplateFactory": 1,
                "Timer": 1,
                "Util": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "StructureJS",
            "namespace": "",
            "description": "The StringUtil...",
            "file": "src/assets/scripts/structurejs/util/Util.js",
            "line": 4
        },
        "core": {
            "name": "core",
            "submodules": {},
            "classes": {
                "BaseObject": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "StructureJS",
            "namespace": "",
            "description": "The {{#crossLink \"BaseObject\"}}{{/crossLink}} class is an abstract class that provides common properties and functionality for all  classes.",
            "file": "src/assets/scripts/structurejs/BaseObject.js",
            "line": 8
        }
    },
    "classes": {
        "DOMElement": {
            "name": "DOMElement",
            "shortname": "DOMElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 10,
            "description": "The {{#crossLink \"DOMElement\"}}{{/crossLink}} class is the base view class for all objects that can be placed into the HTML DOM.",
            "submodule": "view",
            "params": [
                {
                    "name": "type",
                    "description": "[any=null] Either a jQuery object or template you want to use the as the view. Check out the examples below."
                },
                {
                    "name": "params",
                    "description": "[any=null] Any data you would like to pass into the jQuery element or template that is being created."
                }
            ],
            "extends": "DisplayObjectContainer",
            "is_constructor": 1,
            "version": "0.1.2",
            "example": [
                "\n       // Example of using DOMElement with out extending it.\n       var aLink = new DOMElement('a', {text: 'Google', href: 'http://www.google.com', 'class': 'externalLink'});\n       this.addChild(aLink);",
                "\n       // Example of a view passing in a jQuery object.\n       var view = new CustomView($('.selector');\n       this.addChild(view);\n\n       // Example of a view extending DOMElement when passing in a jQuery object.\n       var Extend = require('structurejs/util/Extend');\n       var DOMElement = require('structurejs/display/DOMElement');\n\n       var ClassName = (function () {\n\n           var _super = Extend(ClassName, DOMElement);\n\n           function ClassName($element) {\n               _super.call(this, $element);\n           }\n\n           ClassName.prototype.createChildren = function () {\n               _super.prototype.createChildren.call(this);\n\n               // Create and add your child objects to this parent class.\n           }\n\n           ClassName.prototype.layoutChildren = function () {\n               // Layout or update the child objects in this parent class.\n\n               return this;\n           }\n\n           ClassName.prototype.enable = function () {\n               if (this.isEnabled === true) return this;\n\n               // Enable the child objects and add any event listeners.\n\n               return _super.prototype.enable.call(this);\n           }\n\n           ClassName.prototype.disable = function () {\n               if (this.isEnabled === false) return this;\n\n               // Disable the child objects and remove any event listeners.\n\n               return _super.prototype.disable.call(this);\n           }\n\n           ClassName.prototype.destroy = function () {\n               _super.prototype.destroy.call(this);\n\n               // Destroy the child objects and references in this parent class to prevent memory leaks.\n           }\n\n           return ClassName;\n       })();",
                "\n       // Example of a view extending DOMElement with template passed into createChildren.\n       var view:CustomView = new CustomView();\n       this.addChild(view);\n\n       // Example of a view extending DOMElement when passing in a jQuery object.\n       var Extend = require('structurejs/util/Extend');\n       var DOMElement = require('structurejs/display/DOMElement');\n       var HomeTemplate = require('hbs!templates/home/homeTemplate');\n\n       var ClassName = (function () {\n\n           var _super = Extend(ClassName, DOMElement);\n\n           function ClassName() {\n               _super.call(this);\n           }\n\n           ClassName.prototype.createChildren = function () {\n               _super.prototype.createChildren.call(this, HomeTemplate, {data: 'some data'});\n\n               // Create and add your child objects to this parent class.\n           }\n\n           ClassName.prototype.layoutChildren = function () {\n               // Layout or update the child objects in this parent class.\n\n               return this;\n           }\n\n           ClassName.prototype.enable = function () {\n               if (this.isEnabled === true) return this;\n\n               // Enable the child objects and add any event listeners.\n\n               return _super.prototype.enable.call(this);\n           }\n\n           ClassName.prototype.disable = function () {\n               if (this.isEnabled === false) return this;\n\n               // Disable the child objects and remove any event listeners.\n\n               return _super.prototype.disable.call(this);\n           }\n\n           ClassName.prototype.destroy = function () {\n               _super.prototype.destroy.call(this);\n\n               // Destroy the child objects and references in this parent class to prevent memory leaks.\n           }\n\n           return ClassName;\n       })();"
            ]
        },
        "DisplayObjectContainer": {
            "name": "DisplayObjectContainer",
            "shortname": "DisplayObjectContainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 7,
            "description": "The {{#crossLink \"DisplayObjectContainer\"}}{{/crossLink}} class is the base class for all objects that can be placed on the display list.",
            "submodule": "view",
            "extends": "EventDispatcher",
            "is_constructor": 1,
            "version": "0.1.1"
        },
        "Stage": {
            "name": "Stage",
            "shortname": "Stage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "src/assets/scripts/structurejs/display/Stage.js",
            "line": 8,
            "description": "The {{#crossLink \"Stage\"}}{{/crossLink}} class should be extended by your main or root class.",
            "example": [
                "\n    // This example illustrates how to setup your main or root class when extending the {{#crossLink \"Stage\"}}{{/crossLink}} class.\n       define(function (require, exports, module) {\n           'use strict';\n\n           var Extend = require('structurejs/util/Extend');\n           var Stage = require('replace/path/Stage');\n\n           var MainClass = (function () {\n\n           var _super = Extend(MainClass, Stage);\n\n               function MainClass() {\n                   _super.call(this);\n               }\n\n               MainClass.prototype.createChildren = function () {\n                   _super.prototype.createChildren.call(this);\n\n                   // Create and add your child objects to this parent class.\n               }\n\n               MainClass.prototype.layoutChildren = function () {\n                   // Layout or update the child objects in this parent class.\n\n                   return this;\n               }\n\n               MainClass.prototype.enable = function () {\n                   if (this.isEnabled === true) return this;\n\n                   // Enable the child objects and add any event listeners.\n\n                   return _super.prototype.enable.call(this);\n               }\n\n               MainClass.prototype.disable = function () {\n                   if (this.isEnabled === false) return this;\n\n                   // Disable the child objects and remove any event listeners.\n\n                   return _super.prototype.disable.call(this);\n               }\n\n               MainClass.prototype.destroy = function () {\n                   _super.prototype.destroy.call(this);\n\n                   // Destroy the child objects and references in this parent class to prevent memory leaks.\n               }\n\n               return MainClass;\n           })();\n\n           module.exports = MainClass;\n       });\n\n<b>Instantiation Example</b><br>\nThis example illustrates how to instantiation your main or root class.\n\n     var app = new MainClass();\n     app.appendTo('body');"
            ],
            "submodule": "view",
            "extends": "DOMElement",
            "is_constructor": 1,
            "version": "0.1.0"
        },
        "BaseEvent": {
            "name": "BaseEvent",
            "shortname": "BaseEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "src/assets/scripts/structurejs/event/BaseEvent.js",
            "line": 7,
            "description": "<p>The {{#crossLink \"BaseEvent\"}}{{/crossLink}} class is used as the base class for the creation of Event objects, which are passed as parameters to event listeners when an event occurs.</p>\n\n<p>The properties of the {{#crossLink \"BaseEvent\"}}{{/crossLink}} class carry basic information about an event, such as the event's type or whether the event's default behavior can be canceled.\nFor many events, such as the events represented by the Event class constants, this basic information is sufficient. Other events, however, may require more\ndetailed information.</p>",
            "submodule": "event",
            "extends": "BaseObject",
            "example": [
                "\n    // Example: how to create a custom event by extending BaseEvent.\n       var Extend = require('structurejs/util/Extend');\n       var BaseEvent = require('structurejs/event/BaseEvent');\n\n       var CountryEvent = (function () {\n\n           var _super = Extend(CountryEvent, BaseEvent);\n\n           CountryEvent.CHANGE_COUNTRY = \"CountryEvent.changeCountry\";\n\n           function CountryEvent(type, bubbles, cancelable, data) {\n               _super.call(this, type, bubbles, cancelable, data);\n\n               this.countryName = null;\n           }\n\n           CountryEvent.prototype.clone = function () {\n               return new CountryEvent(this.type, this.bubble, this.cancelable, this.data);\n           };\n\n           return CountryEvent;\n       })();",
                "\n    // Example: how to use the custom event.\n    var event = new CountryEvent(CountryEvent.CHANGE_COUNTRY);\n    this.dispatchEvent(event);\n\n    // Here is a common inline event being dispatched\n    this.dispatchEvent(new CountryEvent(CountryEvent.CHANGE_COUNTRY));"
            ],
            "params": [
                {
                    "name": "type",
                    "description": "The type of event. The type is case-sensitive.",
                    "type": "String"
                },
                {
                    "name": "bubbles",
                    "description": "Indicates whether an event is a bubbling event. If the event can bubble, this value is true; otherwise it is false.\nNote: With event-bubbling you can let one Event subsequently call on every ancestor ({{#crossLink \"EventDispatcher/parent:property\"}}{{/crossLink}})\n(containers of containers of etc.) of the {{#crossLink \"DisplayObjectContainer\"}}{{/crossLink}} that originally dispatched the Event, all the way up to the surface ({{#crossLink \"Stage\"}}{{/crossLink}}). Any classes that do not have a parent cannot bubble.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "cancelable",
                    "description": "Indicates whether the behavior associated with the event can be prevented. If the behavior can be canceled, this value is true; otherwise it is false.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "data",
                    "description": "Use to pass any type of data with the event.",
                    "type": "Any",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "is_constructor": 1,
            "version": "0.1.0"
        },
        "EventBroker": {
            "name": "EventBroker",
            "shortname": "EventBroker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "src/assets/scripts/structurejs/event/EventBroker.js",
            "line": 6,
            "description": "EventBroker is a simple publish and subscribe static class that you can use to fire and receive notifications.\nLoosely coupled event handling, the subscriber does not have to know the publisher. Both of them only need to know the event type.",
            "submodule": "event",
            "static": 1,
            "version": "0.1.0"
        },
        "EventDispatcher": {
            "name": "EventDispatcher",
            "shortname": "EventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "src/assets/scripts/structurejs/event/EventDispatcher.js",
            "line": 7,
            "description": "The EventDispatcher class is the base class for all classes that dispatch events and is the base class for the {{#crossLink \"DisplayObjectContainer\"}}{{/crossLink}} class.\nThe EventDispatcher provides methods for managing prioritized queues of event listeners and dispatching events.",
            "submodule": "event",
            "extends": "BaseObject",
            "is_constructor": 1,
            "version": "0.1.0"
        },
        "TimerEvent": {
            "name": "TimerEvent",
            "shortname": "TimerEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "src/assets/scripts/structurejs/event/TimerEvent.js",
            "line": 7,
            "description": "The TimerEvent...",
            "submodule": "event",
            "extends": "BaseEvent",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event. The type is case-sensitive.",
                    "type": "String"
                },
                {
                    "name": "bubbles",
                    "description": "Indicates whether an event is a bubbling event. If the event can bubble, this value is true; otherwise it is false.\nNote: With event-bubbling you can let one Event subsequently call on every ancestor ({{#crossLink \"EventDispatcher/parent:property\"}}{{/crossLink}})\n(containers of containers of etc.) of the {{#crossLink \"DisplayObjectContainer\"}}{{/crossLink}} that originally dispatched the Event, all the way up to the surface ({{#crossLink \"Stage\"}}{{/crossLink}}). Any classes that do not have a parent cannot bubble.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "cancelable",
                    "description": "Indicates whether the behavior associated with the event can be prevented. If the behavior can be canceled, this value is true; otherwise it is false.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "data",
                    "description": "Use to pass any type of data with the event.",
                    "type": "Any",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "is_constructor": 1,
            "version": "0.1.0"
        },
        "ValueObject": {
            "name": "ValueObject",
            "shortname": "ValueObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "src/assets/scripts/structurejs/model/ValueObject.js",
            "line": 8,
            "description": "Value Object (VO) is a design pattern used to transfer data between software application subsystems.",
            "submodule": "model",
            "params": [
                {
                    "name": "data",
                    "description": "Provide a way to update the value object upon initialization.",
                    "type": "Any",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "version": "0.1.0"
        },
        "StringUtil": {
            "name": "StringUtil",
            "shortname": "StringUtil",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "src/assets/scripts/structurejs/util/StringUtil.js",
            "line": 4,
            "description": "The StringUtil...",
            "submodule": "util",
            "is_constructor": 1,
            "static": 1,
            "version": "0.1.0"
        },
        "TemplateFactory": {
            "name": "TemplateFactory",
            "shortname": "TemplateFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "src/assets/scripts/structurejs/util/TemplateFactory.js",
            "line": 9,
            "description": "YUIDoc_comment",
            "submodule": "util",
            "is_constructor": 1,
            "version": "0.1.0"
        },
        "Timer": {
            "name": "Timer",
            "shortname": "Timer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "src/assets/scripts/structurejs/util/Timer.js",
            "line": 8,
            "description": "Constructs a new Timer object with the specified delay and repeatCount states.",
            "submodule": "util",
            "extends": "EventDispatcher",
            "is_constructor": 1,
            "version": "0.1.0"
        },
        "Util": {
            "name": "Util",
            "shortname": "Util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "src/assets/scripts/structurejs/util/Util.js",
            "line": 4,
            "description": "A Utility class that has several static methods to assist in development.",
            "submodule": "util",
            "is_constructor": 1,
            "version": "0.2.0"
        },
        "BaseObject": {
            "name": "BaseObject",
            "shortname": "BaseObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "StructureJS",
            "namespace": "",
            "file": "src/assets/scripts/structurejs/BaseObject.js",
            "line": 8,
            "description": "The {{#crossLink \"BaseObject\"}}{{/crossLink}} class is an abstract class that provides common properties and functionality for all  classes.",
            "submodule": "core",
            "is_constructor": 1,
            "version": "0.1.0"
        }
    },
    "classitems": [
        {
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 143,
            "description": "Whether or not the display object is visible. Display objects that are not visible are disabled.\nFor example, if visible=false for an InteractiveObject instance, it cannot be clicked.",
            "itemtype": "property",
            "name": "_isVisible",
            "type": "{boolean}",
            "default": "true",
            "access": "private",
            "tagname": "",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 154,
            "description": "A cached of the DOM Element.",
            "itemtype": "property",
            "name": "element",
            "type": "{Element}",
            "default": "null",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 163,
            "description": "A cached jQuery object for the view's element.",
            "itemtype": "property",
            "name": "$element",
            "type": "{JQuery}",
            "default": "null",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 172,
            "description": "If a jQuery object was passed into the constructor this will be set as true and\nthis class will not try add the view to the DOM because it should already exists.",
            "itemtype": "property",
            "name": "_isReference",
            "type": "{boolean}",
            "access": "private",
            "tagname": "",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 182,
            "description": "Holds onto the value passed into the constructor.",
            "itemtype": "property",
            "name": "_type",
            "type": "{string}",
            "default": "null",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 191,
            "description": "Holds onto the value passed into the constructor.",
            "itemtype": "property",
            "name": "_params",
            "type": "{any}",
            "default": "null",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 209,
            "description": "The createChildren function is intended to provide a consistent place for the creation and adding\nof children to the view. It will automatically be called the first time that the view is added\nto another DisplayObjectContainer. It is critical that all subclasses call the super for this function in\ntheir overridden methods.\n\nThis method gets called only once when the child view is added to another view. If the child view is removed and added to another view the createChildren method will not be called again.",
            "example": [
                "\n           // EXAMPLE 1: By default your view class will be a div element:\n           ClassName.prototype.createChildren() {\n               _super.prototype.createChildren.call(this);\n\n               this._childInstance = new DOMElement();\n               this.addChild(this._childInstance);\n           }\n\n           // EXAMPLE 2: But lets say you wanted the view to be a ul element your would do:\n           ClassName.prototype.createChildren() {\n               _super.prototype.createChildren.call(this, 'ul');\n           }\n\n           // Then you could nest other elements inside this base view/element.\n           ClassName.prototype.createChildren() {\n               _super.prototype.createChildren.call(this, 'ul', {id: 'myId', 'class': 'myClass anotherClass'});\n\n               var li = new DOMElement('li', {text: 'Robert is cool'});\n               this.addChild(li);\n           }\n\n           // EXAMPLE 3: So that's cool but what if you wanted a block of html to be your view. Let's say you had the below inline Handlebar template in your html file.\n           <script id=\"todoTemplate\" type=\"text/template\">\n               <div id=\"htmlTemplatel\" class=\"js-todo\">\n                   <div id=\"input-wrapper\">\n                       <input type=\"text\" class=\"list-input\" placeholder=\"{{ data.text }}\">\n                       <input type=\"button\" class=\"list-item-submit\" value=\"Add\">\n                   </div>\n               </div>\n           </script>\n\n           // You would just pass in the id or class selector of the template which in this case is \"#todoTemplate\". There is a second optional argument where you can pass data for the Handlebar template to use.\n           ClassName.prototype.createChildren() {\n               _super.prototype.createChildren.call(this, '#todoTemplate', { data: this.viewData });\n\n           }\n\n           // EXAMPLE 4: One more way. Let's say you wanted to use th Handlebar pluign within RequireJS. You can pass the template into createChildren.\n           var HomeTemplate = require('hbs!templates/HomeTemplate');\n\n           ClassName.prototype.createChildren() {\n               _super.prototype.createChildren.call(this, HomeTemplate, {data: \"some data\"});\n\n           }"
            ],
            "itemtype": "method",
            "name": "createChildren",
            "params": [
                {
                    "name": "type",
                    "description": "[string=div] The HTML tag you want to create or the id/class selector of the template or the pre-compiled path to a template."
                },
                {
                    "name": "params",
                    "description": "[any=null] Any data you would like to pass into the jQuery element or template that is being created."
                }
            ],
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DOMElement"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 289,
            "overridden": "DisplayObjectContainer.addChild",
            "example": [
                "\n           container.addChild(domElementInstance);"
            ],
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "The DOMElement instance to add as a child of this object instance.",
                    "type": "DOMElement"
                }
            ],
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DOMElement"
            },
            "chainable": 1,
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 325,
            "description": "Gets called when the child object is added to the DOM.\nThe method will call {{#crossLink \"DOMElement/layoutChildren:method\"}}{{/crossLink}} and dispatch the BaseEvent.ADDED event.",
            "itemtype": "method",
            "name": "onDomAdded",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "JQueryEventObject"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 340,
            "overridden": "DisplayObjectContainer.addChildAt",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 374,
            "overridden": "DisplayObjectContainer.swapChildren",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 387,
            "overridden": "DisplayObjectContainer.getChildAt",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 394,
            "description": "Returns a DOMElement object with the first found DOM element by the passed in selector.",
            "itemtype": "method",
            "name": "getChild",
            "params": [
                {
                    "name": "selector",
                    "description": "DOM id name, DOM class name or a DOM tag name.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "DOMElement"
            },
            "access": "public",
            "tagname": "",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 430,
            "description": "Gets all the HTML elements children of this object.",
            "itemtype": "method",
            "name": "getChildren",
            "params": [
                {
                    "name": "selector",
                    "description": "You can pass in any type of jQuery selector. If there is no selector passed in it will get all the children this parent element.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a list of DOMElement's. It will grab all children HTML DOM elements of this object and will create a DOMElement for each DOM child.\nIf the 'data-cid' property exists is on an HTML element a DOMElement will not be create for that element because it will be assumed it already exists as a DOMElement.",
                "type": "Array"
            },
            "access": "public",
            "tagname": "",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 467,
            "description": "Removes the specified child object instance from the child list of the parent object instance.\nThe parent property of the removed child is set to null , and the object is garbage collected if no other references\nto the child exist. The index positions of any objects above the child in the parent object are decreased by 1.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "child",
                    "description": "The DisplayObjectContainer instance to remove.",
                    "type": "DOMElement"
                }
            ],
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DOMElement"
            },
            "override": "",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 488,
            "description": "Removes all child object instances from the child list of the parent object instance.\nThe parent property of the removed children is set to null , and the objects are garbage collected if no other\nreferences to the children exist.",
            "itemtype": "method",
            "name": "removeChildren",
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DOMElement"
            },
            "override": "",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 507,
            "description": "Indicates the alpha transparency value of the object specified. Valid values are 0 (fully transparent)\nto 1 (fully opaque). The default value is 1. Display objects with alpha set to 0 are active, even though\nthey are invisible.",
            "itemtype": "method",
            "name": "alpha",
            "params": [
                {
                    "name": "number",
                    "description": ""
                }
            ],
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DOMElement"
            },
            "chainable": 1,
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 522,
            "itemtype": "method",
            "name": "visible",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DOMElement.js",
            "line": 541,
            "overridden": "DisplayObjectContainer.destroy",
            "class": "DOMElement",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 24,
            "description": "The isCreated property is used to keep track if it is the first time this DisplayObjectContainer is created.",
            "itemtype": "property",
            "name": "isCreated",
            "type": "{boolean}",
            "default": "false",
            "access": "protected",
            "tagname": "",
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 34,
            "description": "Returns the number of children of this object.",
            "itemtype": "property",
            "name": "numChildren",
            "type": "{init}",
            "default": "0",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 45,
            "description": "A reference to the child DisplayObjectContainer instances to this parent object instance.",
            "itemtype": "property",
            "name": "children",
            "type": "{array}",
            "readonly": "",
            "access": "public",
            "tagname": "",
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 55,
            "description": "A property providing access to the width.",
            "itemtype": "property",
            "name": "width",
            "type": "{number}",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 65,
            "description": "A property providing access to the height.",
            "itemtype": "property",
            "name": "height",
            "type": "{number}",
            "default": "0",
            "access": "public",
            "tagname": "",
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 75,
            "description": "A property providing access to the unscaledWidth.",
            "itemtype": "property",
            "name": "unscaledWidth",
            "type": "{number}",
            "default": "100",
            "access": "public",
            "tagname": "",
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 85,
            "description": "A property providing access to the unscaledHeight.",
            "itemtype": "property",
            "name": "unscaledHeight",
            "type": "{number}",
            "default": "100",
            "access": "public",
            "tagname": "",
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 96,
            "description": "The createChildren function is intended to provide a consistent place for the creation and adding\nof children to the view. It will automatically be called the first time that the view is added\nto another DisplayObjectContainer. It is critical that all subclasses call the super for this function in\ntheir overridden methods.",
            "itemtype": "method",
            "name": "createChildren",
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DisplayObjectContainer"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 112,
            "description": "Adds a child DisplayObjectContainer instance to this parent object instance. The child is added to the front (top) of all other\nchildren in this parent object instance. (To add a child to a specific index position, use the addChildAt() method.)\n\nIf you add a child object that already has a different parent, the object is removed from the child\nlist of the other parent object.",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "The DisplayObjectContainer instance to add as a child of this DisplayObjectContainerContainer instance.",
                    "type": "DisplayObjectContainer"
                }
            ],
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DisplayObjectContainer"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 139,
            "description": "Adds a child DisplayObjectContainer instance to this DisplayObjectContainerContainer instance.\nThe child is added at the index position specified. An index of 0 represents the back\n(bottom) of the display list for this DisplayObjectContainerContainer object.",
            "itemtype": "method",
            "name": "addChildAt",
            "params": [
                {
                    "name": "child",
                    "description": "The DisplayObjectContainer instance to add as a child of this object instance.",
                    "type": "DisplayObjectContainer"
                },
                {
                    "name": "index",
                    "description": "The index position to which the child is added. If you specify a currently occupied index position, the child object that exists at that position and all higher positions are moved up one position in the child list.",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DisplayObjectContainer"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 165,
            "description": "Swaps two DisplayObjectContainer's with each other.",
            "itemtype": "method",
            "name": "swapChildren",
            "params": [
                {
                    "name": "child1",
                    "description": "The DisplayObjectContainer instance to be swap.",
                    "type": "DisplayObjectContainer"
                },
                {
                    "name": "child2",
                    "description": "The DisplayObjectContainer instance to be swap.",
                    "type": "DisplayObjectContainer"
                }
            ],
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DisplayObjectContainer"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 180,
            "description": "Swaps child objects at the two specified index positions in the child list. All other child objects in the display object container remain in the same index positions.",
            "itemtype": "method",
            "name": "swapChildren",
            "params": [
                {
                    "name": "index1",
                    "description": "The index position of the first child object.",
                    "type": "Int"
                },
                {
                    "name": "index2",
                    "description": "The index position of the second child object.",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DisplayObjectContainer"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 203,
            "description": "Returns the index position of a child DisplayObjectContainer instance.",
            "itemtype": "method",
            "name": "getChildIndex",
            "params": [
                {
                    "name": "child",
                    "description": "The DisplayObjectContainer instance to identify.",
                    "type": "DisplayObjectContainer"
                }
            ],
            "return": {
                "description": "The index position of the child display object to identify.",
                "type": "Int"
            },
            "access": "public",
            "tagname": "",
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 215,
            "description": "Determines whether the specified display object is a child of the DisplayObjectContainer instance or the instance itself. The search includes the entire display list including this DisplayObjectContainer instance.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "child",
                    "description": "The child object to test.",
                    "type": "DisplayObjectContainer"
                }
            ],
            "return": {
                "description": "true if the child object is a child of the DisplayObjectContainer or the container itself; otherwise false.",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 227,
            "description": "Removes the specified child object instance from the child list of the parent object instance.\nThe parent property of the removed child is set to null , and the object is garbage collected if no other references\nto the child exist. The index positions of any objects above the child in the parent object are decreased by 1.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "child",
                    "description": "The DisplayObjectContainer instance to remove.",
                    "type": "DisplayObjectContainer"
                }
            ],
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DisplayObjectContainer"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 251,
            "description": "Removes all child DisplayObjectContainer instances from the child list of the DisplayObjectContainerContainer instance.\nThe parent property of the removed children is set to null , and the objects are garbage collected if\nno other references to the children exist.",
            "itemtype": "method",
            "name": "removeChildren",
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DisplayObjectContainer"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 271,
            "description": "Returns the child display object instance that exists at the specified index.",
            "itemtype": "method",
            "name": "getChildAt",
            "params": [
                {
                    "name": "index",
                    "description": "The index position of the child object.",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "The child display object at the specified index position.",
                "type": "DisplayObjectContainer"
            },
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 282,
            "description": "Gets a DisplayObjectContainer by its cid.",
            "itemtype": "method",
            "name": "getChildByCid",
            "params": [
                {
                    "name": "cid",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "DisplayObjectContainer"
            },
            "override": "",
            "access": "public",
            "tagname": "",
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 299,
            "description": "The setSize method sets the bounds within which the containing DisplayObjectContainer would\nlike that component to lay itself out. It is expected that calling setSize will automatically\ncall {{#crossLink \"DisplayObjectContainer/layoutChildren:method\"}}{{/crossLink}}.",
            "params": [
                {
                    "name": "unscaledWidth",
                    "description": "The width within which the component should lay itself out.",
                    "type": "Number"
                },
                {
                    "name": "unscaledHeight",
                    "description": "The height within which the component should lay itself out.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DisplayObjectContainer"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 320,
            "description": "The layoutComponent method provides a common function to handle updating child objects.",
            "itemtype": "method",
            "name": "layoutChildren",
            "return": {
                "description": "Returns an instance of itself.",
                "type": "DisplayObjectContainer"
            },
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/DisplayObjectContainer.js",
            "line": 332,
            "overridden": "EventDispatcher.destroy",
            "class": "DisplayObjectContainer",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/display/Stage.js",
            "line": 87,
            "description": "The selected HTML element where all the child elements will be created. This method also starts the lifecycle of the application.",
            "itemtype": "method",
            "name": "appendTo",
            "params": [
                {
                    "name": "type",
                    "description": "A string value that you want the your code appended too. This can be an element id (#some-id), element class (.some-class) or a element tag (body).",
                    "type": "String"
                },
                {
                    "name": "enabled",
                    "description": "Sets the enabled state of the object.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "chainable": 1,
            "class": "Stage",
            "module": "StructureJS",
            "submodule": "view"
        },
        {
            "file": "src/assets/scripts/structurejs/event/BaseEvent.js",
            "line": 119,
            "description": "The type of event.",
            "itemtype": "property",
            "name": "type",
            "type": "{string}",
            "default": "null",
            "readonly": "",
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/BaseEvent.js",
            "line": 129,
            "description": "A reference to the object that originally dispatched the event.",
            "itemtype": "property",
            "name": "target",
            "type": "{any}",
            "default": "null",
            "readonly": "",
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/BaseEvent.js",
            "line": 139,
            "description": "The currentTarget property always points to the {{#crossLink \"DisplayObjectContainer\"}}{{/crossLink}} that the event is currently processing (i.e. bubbling at).",
            "itemtype": "property",
            "name": "currentTarget",
            "type": "{any}",
            "default": "null",
            "readonly": "",
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/BaseEvent.js",
            "line": 149,
            "description": "Use to pass any type of data with the event.",
            "itemtype": "property",
            "name": "data",
            "type": "{any}",
            "default": "null",
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/BaseEvent.js",
            "line": 158,
            "description": "Indicates whether an event is a bubbling event.",
            "itemtype": "property",
            "name": "bubble",
            "type": "{boolean}",
            "default": "false",
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/BaseEvent.js",
            "line": 167,
            "description": "Indicates whether the behavior associated with the event can be prevented.",
            "itemtype": "property",
            "name": "cancelable",
            "type": "{boolean}",
            "default": "false",
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/BaseEvent.js",
            "line": 176,
            "itemtype": "property",
            "name": "isPropagationStopped",
            "type": "{boolean}",
            "default": "false",
            "readonly": "",
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/BaseEvent.js",
            "line": 185,
            "itemtype": "property",
            "name": "isImmediatePropagationStopped",
            "type": "{boolean}",
            "default": "false",
            "readonly": "",
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/BaseEvent.js",
            "line": 200,
            "description": "Duplicates an instance of an BaseEvent subclass.\n\nReturns a new BaseEvent object that is a copy of the original instance of the BaseEvent object.\nYou do not normally call clone(); the EventDispatcher class calls it automatically when you redispatch\nan event—that is, when you call dispatchEvent(event) from a handler that is handling event.\n\nThe new Event object includes all the properties of the original.\n\nWhen creating your own custom Event class, you must override the inherited Event.clone() method in order for it\nto duplicate the properties of your custom class. If you do not set all the properties that you add in your event\nsubclass, those properties will not have the correct values when listeners handle the redispatched event.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "BaseEvent"
            },
            "access": "public",
            "tagname": "",
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/BaseEvent.js",
            "line": 221,
            "description": "Prevents processing of any event listeners in nodes subsequent to the current node in the event flow.\nThis method does not affect any event listeners in the current node (currentTarget). In contrast, the stopImmediatePropagation()\nmethod prevents processing of event listeners in both the current node and subsequent nodes. Additional calls to this method have no effect.\nThis method can be called in any phase of",
            "itemtype": "method",
            "name": "stopPropagation",
            "access": "public",
            "tagname": "",
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/BaseEvent.js",
            "line": 234,
            "description": "Prevents processing of any event listeners in the current node and any subsequent nodes in the event flow.\nThis method takes effect immediately, and it affects event listeners in the current node. In contrast, the stopPropagation()\nmethod doesn't take effect until all the event listeners in the current node finish processing.",
            "itemtype": "method",
            "name": "stopImmediatePropagation",
            "access": "public",
            "tagname": "",
            "class": "BaseEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/EventBroker.js",
            "line": 24,
            "description": "Registers an event listener object with an EventBroker object so that the listener receives notification of an event.",
            "example": [
                "\n       EventBroker.addEventListener(BaseEvent.CHANGE, this.handlerMethod, this);\n\n       ClassName.prototype.handlerMethod(event) {\n           console.log(event.target + \" sent the event.\");\n       }"
            ],
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener function that processes the event. This function must accept an Event object as its only parameter and must return nothing, as this example shows. @example function(event:Event)",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "Binds the scope to a particular object (scope is basically what \"this\" refers to in your function). This can be very useful in JavaScript because scope isn't generally maintained.",
                    "type": "Any"
                },
                {
                    "name": "priority",
                    "description": "Influences the order in which the listeners are called. Listeners with lower priorities are called after ones with higher priorities.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "EventBroker",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/EventBroker.js",
            "line": 45,
            "description": "Removes a specified listener from the EventBroker object.",
            "example": [
                "\n       EventBroker.removeEventListener(BaseEvent.CHANGE, this.handlerMethod, this);\n\n       ClassName.prototype.handlerMethod(event:BaseEvent) {\n           console.log(event.target + \" sent the event.\");\n       }"
            ],
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener object to remove.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The scope of the listener object to be removed.\nTo keep things consistent this parameter is required.",
                    "type": "Any"
                }
            ],
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "EventBroker",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/EventBroker.js",
            "line": 65,
            "description": "<p>Dispatches an event within the EventBroker object.</p>",
            "example": [
                "\n        var event = new BaseEvent(BaseEvent.CHANGE);\n        EventBroker.dispatchEvent(event);\n\n        // Here is a common inline event being dispatched\n        EventBroker.dispatchEvent(new BaseEvent(BaseEvent.CHANGE));"
            ],
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The Event object that is dispatched into the event flow. You can create custom events, the only requirement is all events must\nextend the {{#crossLink \"BaseEvent\"}}{{/crossLink}}.",
                    "type": "BaseEvent"
                }
            ],
            "static": 1,
            "access": "public",
            "tagname": "",
            "class": "EventBroker",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/EventDispatcher.js",
            "line": 25,
            "description": "Holds a reference to added listeners.",
            "itemtype": "property",
            "name": "_listeners",
            "type": "{array}",
            "access": "private",
            "tagname": "",
            "class": "EventDispatcher",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/EventDispatcher.js",
            "line": 33,
            "description": "Indicates the object that contains child object. Use the parent property\nto specify a relative path to display objects that are above the current display object in the display\nlist hierarchy.",
            "itemtype": "property",
            "name": "parent",
            "type": "{any}",
            "access": "public",
            "tagname": "",
            "class": "EventDispatcher",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/EventDispatcher.js",
            "line": 43,
            "description": "The isEnabled property is used to keep track of the enabled state of the object.",
            "itemtype": "property",
            "name": "isEnabled",
            "type": "{boolean}",
            "default": "false",
            "access": "protected",
            "tagname": "",
            "class": "EventDispatcher",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/EventDispatcher.js",
            "line": 56,
            "description": "Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.",
            "example": [
                "\n       instance.addEventListener(BaseEvent.CHANGE, this.handlerMethod, this);\n\n       ClassName.prototype.handlerMethod(event) {\n           console.log(event.target + \" sent the event.\");\n       }"
            ],
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener function that processes the event. This function must accept an Event object as its only parameter and must return nothing, as this example shows. @example function(event:Event)",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "Binds the scope to a particular object (scope is basically what \"this\" refers to in your function). This can be very useful in JavaScript because scope isn't generally maintained.",
                    "type": "Any"
                },
                {
                    "name": "priority",
                    "description": "Influences the order in which the listeners are called. Listeners with lower priorities are called after ones with higher priorities.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "EventDispatcher",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/EventDispatcher.js",
            "line": 99,
            "description": "Removes a specified listener from the EventDispatcher object.",
            "example": [
                "\n       instance.removeEventListener(BaseEvent.CHANGE, this.handlerMethod, this);\n\n       ClassName.prototype.handlerMethod(event) {\n           console.log(event.target + \" sent the event.\");\n       }"
            ],
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The type of event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The listener object to remove.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The scope of the listener object to be removed.",
                    "type": "Any"
                }
            ],
            "hide": "This was added because it was need for the {{#crossLink \"EventBroker\"}}{{/crossLink}} class. To keep things consistent this parameter is required.",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "EventDispatcher",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/EventDispatcher.js",
            "line": 132,
            "description": "<p>Dispatches an event into the event flow. The event target is the EventDispatcher object upon which the dispatchEvent() method is called.</p>",
            "example": [
                "\n       var event = new BaseEvent(BaseEvent.CHANGE);\n       instance.dispatchEvent(event);\n\n       // Here is a common inline event being dispatched\n       instance.dispatchEvent(new BaseEvent(BaseEvent.CHANGE));"
            ],
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The Event object that is dispatched into the event flow. You can create custom events, the only requirement is all events must\nextend the {{#crossLink \"BaseEvent\"}}{{/crossLink}}.",
                    "type": "BaseEvent"
                }
            ],
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "EventDispatcher",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/EventDispatcher.js",
            "line": 193,
            "overridden": "BaseObject.destroy",
            "class": "EventDispatcher",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/EventDispatcher.js",
            "line": 205,
            "description": "The enable method is responsible for enabling event listeners and/or children of the containing objects.",
            "example": [
                "\n       ClassName.prototype.enable = function () {\n           if (this.isEnabled === true) return this;\n\n           this._childInstance.addEventListener(BaseEvent.CHANGE, this.handlerMethod, this);\n           this._childInstance.enable();\n\n           return _super.prototype.enable.call(this);\n       }"
            ],
            "itemtype": "method",
            "name": "enable",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "EventDispatcher",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/EventDispatcher.js",
            "line": 227,
            "description": "The disable method is responsible for disabling event listeners and/or children of the containing objects.",
            "example": [
                "\n       ClassName.prototype.disable = function () {\n           if (this.isEnabled === false) return this;\n\n           this._childInstance.removeEventListener(BaseEvent.CHANGE, this.handlerMethod, this);\n           this._childInstance.disable();\n\n           return _super.prototype.disable.call(this);\n       }"
            ],
            "itemtype": "method",
            "name": "disable",
            "access": "public",
            "tagname": "",
            "chainable": 1,
            "class": "EventDispatcher",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/EventDispatcher.js",
            "line": 249,
            "description": "Meant for debugging purposes; returns an array dictionary of the different event listener(s) on the object.",
            "itemtype": "method",
            "name": "getEventListeners",
            "return": {
                "description": "Returns an array dictionary of the different event listener(s) on the object.",
                "type": "Array"
            },
            "access": "public",
            "tagname": "",
            "class": "EventDispatcher",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/event/TimerEvent.js",
            "line": 39,
            "overridden": "BaseEvent.clone",
            "class": "TimerEvent",
            "module": "StructureJS",
            "submodule": "event"
        },
        {
            "file": "src/assets/scripts/structurejs/model/ValueObject.js",
            "line": 26,
            "description": "Provide a way to update the value object.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Any"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "ValueObject",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "src/assets/scripts/structurejs/model/ValueObject.js",
            "line": 37,
            "description": "...",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "",
                "type": "ValueObject"
            },
            "access": "public",
            "tagname": "",
            "class": "ValueObject",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "src/assets/scripts/structurejs/model/ValueObject.js",
            "line": 49,
            "description": "...",
            "itemtype": "method",
            "name": "toJSONString",
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "ValueObject",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "src/assets/scripts/structurejs/model/ValueObject.js",
            "line": 60,
            "description": "Converts the string json data into an Object and calls the {{#crossLink \"ValueObject/update:method\"}}{{/crossLink}} method with the converted Object.",
            "itemtype": "method",
            "name": "fromJSON",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "public",
            "tagname": "",
            "class": "ValueObject",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "src/assets/scripts/structurejs/model/ValueObject.js",
            "line": 74,
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "class": "ValueObject",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "src/assets/scripts/structurejs/model/ValueObject.js",
            "line": 85,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "IValueObject"
            },
            "access": "public",
            "tagname": "",
            "class": "ValueObject",
            "module": "StructureJS",
            "submodule": "model"
        },
        {
            "file": "src/assets/scripts/structurejs/plugin/jquery.eventListener.js",
            "line": 6,
            "description": "A bind polyfill for browsers that don't support the bind method.",
            "class": "StringUtil",
            "module": "StructureJS"
        },
        {
            "file": "src/assets/scripts/structurejs/plugin/jquery.eventListener.js",
            "line": 27,
            "description": "Generates a hash string from the string being passed in. In this case it is a function that is casted as string value.",
            "params": [
                {
                    "name": "str",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "StringUtil",
            "module": "StructureJS"
        },
        {
            "file": "src/assets/scripts/structurejs/plugin/jquery.eventListener.js",
            "line": 53,
            "description": "The jQuery addEventListener plugin",
            "class": "StringUtil",
            "module": "StructureJS"
        },
        {
            "file": "src/assets/scripts/structurejs/plugin/jquery.eventListener.js",
            "line": 88,
            "description": "The jQuery removeEventListener plugin",
            "class": "StringUtil",
            "module": "StructureJS"
        },
        {
            "file": "src/assets/scripts/structurejs/util/StringUtil.js",
            "line": 21,
            "description": "YUIDoc_comment",
            "itemtype": "method",
            "name": "getExtension",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/StringUtil.js",
            "line": 34,
            "description": "YUIDoc_comment",
            "itemtype": "method",
            "name": "hyphenToCamelCase",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/StringUtil.js",
            "line": 51,
            "description": "YUIDoc_comment",
            "itemtype": "method",
            "name": "hyphenToPascalCase",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/StringUtil.js",
            "line": 71,
            "description": "YUIDoc_comment",
            "itemtype": "method",
            "name": "camelCaseToHyphen",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/StringUtil.js",
            "line": 86,
            "description": "YUIDoc_comment",
            "itemtype": "method",
            "name": "createUUID",
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/StringUtil.js",
            "line": 104,
            "description": "YUIDoc_comment",
            "itemtype": "method",
            "name": "queryStringToObject",
            "params": [
                {
                    "name": "queryString",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/StringUtil.js",
            "line": 130,
            "description": "Remove all whitespace from the string passed in.",
            "example": [
                "\n        var str = \"   a b    c d e f g \";\n        StringUtil.removeAllWhitespace(str);\n        // \"abcdefg\""
            ],
            "itemtype": "method",
            "name": "removeAllWhitespace",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/StringUtil.js",
            "line": 146,
            "description": "Remove leading and trailing whitespace.",
            "example": [
                "\n     var str = \"   a b    c d e f g \";\n     StringUtil.removeLeadingTrailingWhitespace(str);\n     // \"a b    c d e f g\""
            ],
            "itemtype": "method",
            "name": "removeLeadingTrailingWhitespace",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/StringUtil.js",
            "line": 163,
            "itemtype": "method",
            "name": "truncate",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "length",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "StringUtil",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Timer.js",
            "line": 27,
            "description": "A reference to the setInterval object.",
            "itemtype": "property",
            "name": "_timer",
            "type": "{Function}",
            "access": "private",
            "tagname": "",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Timer.js",
            "line": 36,
            "description": "The total number of times the timer has fired since it started at zero. If the timer has been reset, only the fires since the reset are counted.",
            "itemtype": "property",
            "name": "currentCount",
            "type": "{int}",
            "access": "private",
            "tagname": "",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Timer.js",
            "line": 45,
            "description": "The delay, in milliseconds, between timer events. If you set the delay interval while the timer is running, the timer will restart at the same repeatCount iteration.\n<strong>Note:</strong> A delay lower than 20 milliseconds is not recommended.",
            "itemtype": "property",
            "name": "delay",
            "type": "{number}",
            "access": "private",
            "tagname": "",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Timer.js",
            "line": 55,
            "description": "The total number of times the timer is set to run. If the repeat count is set to 0, the timer continues indefinitely. If the repeat count is nonzero, the timer runs the specified number of times. If repeatCount is set to a total that is the same or less then currentCount the timer stops and will not fire again.",
            "itemtype": "property",
            "name": "repeatCount",
            "type": "{int}",
            "access": "private",
            "tagname": "",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Timer.js",
            "line": 64,
            "description": "The timer's current state; true if the timer is running, otherwise false.",
            "itemtype": "property",
            "name": "running",
            "type": "{boolean}",
            "readonly": "",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Timer.js",
            "line": 77,
            "description": "Returns the total number of times the timer has fired since it started at zero.",
            "itemtype": "method",
            "name": "getCurrentCount",
            "return": {
                "description": "The total number of times the timer has fired since it started at zero.",
                "type": "Number"
            },
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Timer.js",
            "line": 87,
            "description": "Returns the delay time in milliseconds.",
            "itemtype": "method",
            "name": "getDelay",
            "return": {
                "description": "Returns the delay time in milliseconds.",
                "type": "Number"
            },
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Timer.js",
            "line": 97,
            "description": "Sets the delay, in milliseconds, between timer events.",
            "itemtype": "method",
            "name": "setDelay",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Timer.js",
            "line": 111,
            "description": "Returns the total number of times the timer is set to run.",
            "itemtype": "method",
            "name": "getRepeatCount",
            "return": {
                "description": "Returns the total number of times the timer is set to run.",
                "type": "Number"
            },
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Timer.js",
            "line": 121,
            "description": "Set the total number of times the timer is set to run. If the repeat count is set to 0, the timer continues indefinitely. If the repeat count is nonzero, the timer runs the specified number of times. If repeatCount is set to a total that is the same or less then currentCount the timer stops and will not fire again.",
            "itemtype": "method",
            "name": "setRepeatCount",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Timer.js",
            "line": 136,
            "description": "Stops the timer, if it is running, and sets the currentCount property back to 0, like the reset button of a stopwatch.",
            "itemtype": "method",
            "name": "reset",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Timer.js",
            "line": 149,
            "description": "Starts the timer, if it is not already running.",
            "itemtype": "method",
            "name": "start",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Timer.js",
            "line": 169,
            "description": "Stops the timer.",
            "itemtype": "method",
            "name": "stop",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Timer.js",
            "line": 181,
            "itemtype": "method",
            "name": "decrementCounter",
            "access": "private",
            "tagname": "",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Timer.js",
            "line": 200,
            "overridden": "EventDispatcher.destroy",
            "class": "Timer",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Util.js",
            "line": 21,
            "description": "Generates a unique ID. If a prefix is passed in, the value will be appended to it.",
            "example": [
                "\n        var property:number = Util.uniqueId();\n        // 1\n\n        var property:string = Util.uniqueId('yomama_');\n        // yomama_1"
            ],
            "itemtype": "method",
            "name": "uniqueId",
            "params": [
                {
                    "name": "prefix",
                    "description": "The string value used for the prefix.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the unique identifier.",
                "type": "Init|string"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Util",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Util.js",
            "line": 46,
            "itemtype": "method",
            "name": "deletePropertyFromObject",
            "params": [
                {
                    "name": "object",
                    "description": "The object you want to remove properties from.",
                    "type": "Object"
                },
                {
                    "name": "list",
                    "description": "A list of property names you want to remove from the object.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the object passed in without the removed the properties.",
                "type": "Any"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Util",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Util.js",
            "line": 83,
            "itemtype": "method",
            "name": "renamePropertyOnObject",
            "params": [
                {
                    "name": "object",
                    "description": "The object you want to rename properties from.",
                    "type": "Object"
                },
                {
                    "name": "oldName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "newName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the object passed in renamed properties.",
                "type": "Any"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Util",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Util.js",
            "line": 102,
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "obj",
                    "description": "The object you to clone.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a clone object of the one passed in.",
                "type": "Any"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Util",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Util.js",
            "line": 148,
            "description": "YUIDoc_comment",
            "itemtype": "method",
            "name": "toBoolean",
            "params": [
                {
                    "name": "strNum",
                    "description": "",
                    "type": "String|number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Util",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/util/Util.js",
            "line": 163,
            "description": "Returns the name of the class object passed in.",
            "itemtype": "method",
            "name": "getClassName",
            "params": [
                {
                    "name": "classObject",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the name of the class object passed in.",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Util",
            "module": "StructureJS",
            "submodule": "util"
        },
        {
            "file": "src/assets/scripts/structurejs/BaseObject.js",
            "line": 18,
            "description": "The cid or client id is a unique identifier automatically assigned to most  objects upon instantiation.",
            "itemtype": "property",
            "name": "cid",
            "type": "{int}",
            "default": "null",
            "writeonce": "",
            "access": "public",
            "tagname": "",
            "class": "BaseObject",
            "module": "StructureJS",
            "submodule": "core"
        },
        {
            "file": "src/assets/scripts/structurejs/BaseObject.js",
            "line": 31,
            "description": "Returns the fully qualified class name of an object.",
            "example": [
                "\n        instance.getQualifiedClassName();"
            ],
            "itemtype": "method",
            "name": "getQualifiedClassName",
            "return": {
                "description": "Returns the class name.",
                "type": "String"
            },
            "access": "public",
            "tagname": "",
            "class": "BaseObject",
            "module": "StructureJS",
            "submodule": "core"
        },
        {
            "file": "src/assets/scripts/structurejs/BaseObject.js",
            "line": 44,
            "description": "The purpose of the destroy method is to make an object ready for garbage collection. This\nshould be thought of as a one way function. Once destroy is called no further methods should be\ncalled on the object or properties accessed. It is the responsibility of those who implement this\nfunction to stop all running Timers, all running Sounds, remove any event\nlisteners and take any other steps necessary to make an object eligible for garbage collection.\nIt is critical that all subclasses call the super for this function in their overridden methods.\n\nNote: super.destroy(); should be called first before you clean up any other objects/items in the current classs.\nThe {{#crossLink \"BaseObject/destroy:method\"}}{{/crossLink}} method also calls the\n{{#crossLink \"EventDispatcher/disable:method\"}}{{/crossLink}} method on all classes that extend\n{{#crossLink \"EventDispatcher\"}}{{/crossLink}}.",
            "example": [
                "\n       ClassName.prototype.destroy() {\n           _super.prototype.destroy.call(this);\n\n           this._childInstance.destroy();\n           this._childInstance = null;\n       }"
            ],
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": "",
                "type": "Void"
            },
            "access": "public",
            "tagname": "",
            "class": "BaseObject",
            "module": "StructureJS",
            "submodule": "core"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: version",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:10"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:209"
        },
        {
            "message": "unknown tag: overridden",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:289"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:289"
        },
        {
            "message": "unknown tag: overridden",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:340"
        },
        {
            "message": "unknown tag: overridden",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:374"
        },
        {
            "message": "unknown tag: overridden",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:387"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:394"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:430"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:467"
        },
        {
            "message": "unknown tag: override",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:467"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:488"
        },
        {
            "message": "unknown tag: override",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:488"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:507"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:522"
        },
        {
            "message": "unknown tag: overridden",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:541"
        },
        {
            "message": "unknown tag: version",
            "line": " src/assets/scripts/structurejs/display/DisplayObjectContainer.js:7"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DisplayObjectContainer.js:96"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DisplayObjectContainer.js:112"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DisplayObjectContainer.js:139"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DisplayObjectContainer.js:165"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DisplayObjectContainer.js:180"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DisplayObjectContainer.js:203"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DisplayObjectContainer.js:215"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DisplayObjectContainer.js:227"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DisplayObjectContainer.js:251"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DisplayObjectContainer.js:271"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DisplayObjectContainer.js:282"
        },
        {
            "message": "unknown tag: override",
            "line": " src/assets/scripts/structurejs/display/DisplayObjectContainer.js:282"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DisplayObjectContainer.js:299"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/display/DisplayObjectContainer.js:320"
        },
        {
            "message": "unknown tag: overridden",
            "line": " src/assets/scripts/structurejs/display/DisplayObjectContainer.js:332"
        },
        {
            "message": "unknown tag: version",
            "line": " src/assets/scripts/structurejs/display/Stage.js:8"
        },
        {
            "message": "unknown tag: version",
            "line": " src/assets/scripts/structurejs/event/BaseEvent.js:7"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/event/BaseEvent.js:200"
        },
        {
            "message": "unknown tag: version",
            "line": " src/assets/scripts/structurejs/event/EventBroker.js:6"
        },
        {
            "message": "unknown tag: version",
            "line": " src/assets/scripts/structurejs/event/EventDispatcher.js:7"
        },
        {
            "message": "unknown tag: hide",
            "line": " src/assets/scripts/structurejs/event/EventDispatcher.js:99"
        },
        {
            "message": "unknown tag: overridden",
            "line": " src/assets/scripts/structurejs/event/EventDispatcher.js:193"
        },
        {
            "message": "unknown tag: version",
            "line": " src/assets/scripts/structurejs/event/TimerEvent.js:7"
        },
        {
            "message": "unknown tag: overridden",
            "line": " src/assets/scripts/structurejs/event/TimerEvent.js:39"
        },
        {
            "message": "unknown tag: version",
            "line": " src/assets/scripts/structurejs/model/ValueObject.js:8"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/model/ValueObject.js:37"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/model/ValueObject.js:49"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/model/ValueObject.js:74"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/model/ValueObject.js:85"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/plugin/jquery.eventListener.js:27"
        },
        {
            "message": "unknown tag: version",
            "line": " src/assets/scripts/structurejs/util/StringUtil.js:4"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/util/StringUtil.js:21"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/util/StringUtil.js:34"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/util/StringUtil.js:51"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/util/StringUtil.js:71"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/util/StringUtil.js:86"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/util/StringUtil.js:104"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/util/StringUtil.js:130"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/util/StringUtil.js:146"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/util/StringUtil.js:163"
        },
        {
            "message": "unknown tag: version",
            "line": " src/assets/scripts/structurejs/util/TemplateFactory.js:9"
        },
        {
            "message": "unknown tag: version",
            "line": " src/assets/scripts/structurejs/util/Timer.js:8"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/util/Timer.js:77"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/util/Timer.js:87"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/util/Timer.js:111"
        },
        {
            "message": "unknown tag: overridden",
            "line": " src/assets/scripts/structurejs/util/Timer.js:200"
        },
        {
            "message": "unknown tag: version",
            "line": " src/assets/scripts/structurejs/util/Util.js:4"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/util/Util.js:21"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/util/Util.js:46"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/util/Util.js:83"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/util/Util.js:102"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/util/Util.js:148"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/util/Util.js:163"
        },
        {
            "message": "unknown tag: version",
            "line": " src/assets/scripts/structurejs/BaseObject.js:8"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/assets/scripts/structurejs/BaseObject.js:31"
        },
        {
            "message": "Missing item type",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:340"
        },
        {
            "message": "Missing item type",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:374"
        },
        {
            "message": "Missing item type",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:387"
        },
        {
            "message": "Missing item type",
            "line": " src/assets/scripts/structurejs/display/DOMElement.js:541"
        },
        {
            "message": "Missing item type\nThe setSize method sets the bounds within which the containing DisplayObjectContainer would\nlike that component to lay itself out. It is expected that calling setSize will automatically\ncall {{#crossLink \"DisplayObjectContainer/layoutChildren:method\"}}{{/crossLink}}.",
            "line": " src/assets/scripts/structurejs/display/DisplayObjectContainer.js:299"
        },
        {
            "message": "Missing item type",
            "line": " src/assets/scripts/structurejs/display/DisplayObjectContainer.js:332"
        },
        {
            "message": "Missing item type",
            "line": " src/assets/scripts/structurejs/event/EventDispatcher.js:193"
        },
        {
            "message": "Missing item type",
            "line": " src/assets/scripts/structurejs/event/TimerEvent.js:39"
        },
        {
            "message": "Missing item type\nA bind polyfill for browsers that don't support the bind method.",
            "line": " src/assets/scripts/structurejs/plugin/jquery.eventListener.js:6"
        },
        {
            "message": "Missing item type\nGenerates a hash string from the string being passed in. In this case it is a function that is casted as string value.",
            "line": " src/assets/scripts/structurejs/plugin/jquery.eventListener.js:27"
        },
        {
            "message": "Missing item type\nThe jQuery addEventListener plugin",
            "line": " src/assets/scripts/structurejs/plugin/jquery.eventListener.js:53"
        },
        {
            "message": "Missing item type\nThe jQuery removeEventListener plugin",
            "line": " src/assets/scripts/structurejs/plugin/jquery.eventListener.js:88"
        },
        {
            "message": "Missing item type",
            "line": " src/assets/scripts/structurejs/util/Timer.js:200"
        }
    ]
}